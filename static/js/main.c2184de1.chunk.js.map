{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","state","setState","loader","setLoader","page","setPage","last","setLast","observer","IntersectionObserver","entries","isIntersecting","useRef","useEffect","setTimeout","axios","method","url","params","q","sort","order","limit","then","res","data","items","observe","unobserve","className","src","logo","map","el","ref","name","forks","owner","login","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAAe,MAA0B,iC,gCCyF1BA,MAnFf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACJC,EADI,KACGC,EADH,OAEiBF,oBAAS,GAF1B,mBAEJG,EAFI,KAEIC,EAFJ,OAGaJ,mBAAS,GAHtB,mBAGJK,EAHI,KAGEC,EAHF,OAIaN,mBAAS,MAJtB,mBAIJO,EAJI,KAIEC,EAJF,KAMLC,EAAW,IAAIC,sBACjB,SAAAC,GACQA,EAAQ,GAAGC,iBACXN,EAAQD,EAAO,GACfD,GAAU,OAuCtB,OAnCYS,mBAkBZC,qBAAU,WACNC,YAAW,WAjBXC,IAAM,CACFC,OAAQ,MACRC,IAAK,6CACLC,OAAQ,CACJC,EAAE,aACFC,KAAM,QACNC,MAAO,OACPjB,KAAMA,EACNkB,MAAO,OAGVC,MAAK,SAAAC,GACFvB,EAAS,GAAD,mBAAKD,GAAL,YAAcwB,EAAIC,KAAKC,SAC/BvB,GAAU,QAMf,OACJ,CAACC,IAEJS,qBAAU,WAIN,OAHIP,GACAE,EAASmB,QAAQrB,GAEd,WACCA,GACAE,EAASoB,UAAUtB,MAG5B,CAACA,IAGA,qBAAKuB,UAAU,MAAf,SACK3B,EAAS,qBAAK2B,UAAU,WAAWC,IAAKC,IACrC,kCACI,+BACI,sCACA,qCACA,uCACA,0CAEH/B,EAAMgC,KAAI,SAAAC,GAAE,OACT,qBAAIC,IAAK3B,EAAT,UACI,6BACK0B,EAAGE,OAER,6BACKF,EAAGhB,MAER,6BACKgB,EAAGG,QAER,6BACKH,EAAGI,MAAMC,oBCjE3BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c2184de1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport {useEffect, useRef, useState} from \"react\";\nimport axios from \"axios\";\n\n\nfunction App() {\n    const [state, setState] = useState([])\n    const [loader, setLoader] = useState(true)\n    const [page, setPage] = useState(1)\n    const [last, setLast] = useState(null)\n\n    const observer = new IntersectionObserver(\n        entries => {\n            if (entries[0].isIntersecting) {\n                setPage(page + 1)\n                setLoader(true)\n            }\n        }\n    )\n    const ref = useRef()\n    const fetchData = () => {\n        axios({\n            method: 'GET',\n            url: 'https://api.github.com/search/repositories',\n            params: {\n                q: `javascript`,\n                sort: 'stars',\n                order: 'desc',\n                page: page,\n                limit: 120\n            }\n        })\n            .then(res => {\n                setState([...state,...res.data.items])\n                setLoader(false)\n            })\n    }\n    useEffect(() => {\n        setTimeout(() => {\n            fetchData()\n        }, 1000)\n    }, [page])\n\n    useEffect(() => {\n        if (last) {\n            observer.observe(last)\n        }\n        return () => {\n            if (last) {\n                observer.unobserve(last)\n            }\n        }\n    }, [last])\n\n    return (\n        <div className=\"App\">\n            {loader ? <img className='App-logo' src={logo}/> :\n                <table>\n                    <tr>\n                        <th>Name</th>\n                        <th>Url</th>\n                        <th>Forks</th>\n                        <th>Owner</th>\n                    </tr>\n                    {state.map(el =>\n                        <tr ref={setLast}>\n                            <td>\n                                {el.name}\n                            </td>\n                            <td>\n                                {el.url}\n                            </td>\n                            <td>\n                                {el.forks}\n                            </td>\n                            <td>\n                                {el.owner.login}\n                            </td>\n                        </tr>\n                    )}\n\n                </table>\n            }\n        </div>\n\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}